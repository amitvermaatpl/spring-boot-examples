###=## Project: https://medium.com/slalom-engineering/optimistically-locking-your-spring-boot-web-services-187662eb8a91 ###=##

1. What if some not using JPA, means there is no @Version ? 
2. In this project we cover both scenario- JPA and Simple JDBC.

Database console access:= The database can be accessed through the browser at 
http://localhost:8080/h2-console
Then click on 'Connect', no password necessary. This database serves both the JPA and JDBC examples.

Run/Start the Spring boot Project.[INSTALL PYTHON]

Running the JPA based example: To run the JPA example, execute scripts/test-jpa.py

Running the JDBC based example: To run the JPA example, execute scripts/test-jdbc.py

HOW to solve optimistic exception?

https://www.mkyong.com/jpa/jpa-optimistic-lock-exception-in-java-development/

###**## CONCEPT: Optimistic and Pessimistic Locking ###**##

Why Locking? to handle (and prevent) simultaneous access to shared data, with the intention
of preventing inconsistent results. 

Pessimistic Locking:=
The core concept behind this type of locking is that only one person has exclusive access to a shared record, 
achieved via an exclusive lock granted to that user while they are making changes. While the lock is held, no
other person may obtain the lock (and thus must wait). Once that person is done updating the record, the lock 
is released and the next person is eligible to obtain the lock. 

Optimistic Locking:=
With optimistic locking, records are freely given out to whoever wants them. Every record has a version field that
can be represented with a unique number, timestamp, or some sort of a hash. Upon a successful save of the record, 
the version is incremented or updated.

Before the save operation, however, we need to check if the version we originally got matches what’s currently in 
the database. 

Example flow:
1. User A gets version 1
2. — — — — — — — — — — User B also gets version 1
3. — — — — — — — — — — User B saves, the version is now incremented to 2
4. User A attempts to save. ← Lock Error.

So in step 4, User A still has a copy of version 1 and the save fails because the current version is now 2. 
User A would have to get a fresh snapshot of the version 2 data and retry the save.